package com.adp.base;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import https.sassgateway_adp_com.vendorxml.vendorservice.v1.ClientPasswordCallback;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorService;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceFit;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceFitImplService;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceIAT;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceIATImplService;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceImplService;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceProd;
import https.sassgateway_adp_com.vendorxml.vendorservice.v1.VendorServiceProdImplService;

import java.io.File;
import java.io.FileInputStream;
import java.net.URL;
import java.security.KeyStore;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.namespace.QName;

import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.configuration.security.FiltersType;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.WSConstants;
import org.apache.ws.security.handler.WSHandlerConstants;

/**
 * This class was generated by Apache CXF 2.2.6 Thu Mar 04 10:13:03 MST 2010
 * Generated source version: 2.2.6
 * 
 */

public class SuperVendorServiceClient {

	protected static final QName SERVICE_NAME = new QName(
			"https://sassgateway.adp.com/vendorxml/VendorService/v1",
			"VendorServiceImplService");

	protected VendorService portDit;
	protected VendorServiceFit portFit;
	protected VendorServiceIAT portiAT;
	protected VendorServiceProd portProd;
	protected Properties p = new Properties();

	public void loadValues() throws Exception {
		p.load(ClassLoader.getSystemResourceAsStream("gvxData.properties"));

	}

	protected void setService(URL wsdlURL, String hostlocation)
			throws Exception {
		loadValues();
		org.apache.cxf.endpoint.Client client = null;
		if (hostlocation.equals("DIT")) {

			VendorServiceImplService serviceDIT = new VendorServiceImplService(
					wsdlURL, SERVICE_NAME);
			portDit = serviceDIT.getVendorServiceImplPort();
			client = org.apache.cxf.frontend.ClientProxy.getClient(portDit);
		} else if (hostlocation.equals("FIT"))

		{
			VendorServiceFitImplService serviceFIT = new VendorServiceFitImplService(
					wsdlURL, SERVICE_NAME);
			portFit = serviceFIT.getVendorServiceFitImplPort();
			client = org.apache.cxf.frontend.ClientProxy.getClient(portFit);
		}

		else if (hostlocation.equals("IAT"))

		{
			VendorServiceIATImplService serviceIAT = new VendorServiceIATImplService(
					wsdlURL, SERVICE_NAME);
			portiAT = serviceIAT.getVendorServiceIATImplPort();
			client = org.apache.cxf.frontend.ClientProxy.getClient(portiAT);
		}

		else if (hostlocation.equals("PROD"))

		{
			VendorServiceProdImplService serviceProd = new VendorServiceProdImplService(
					wsdlURL, SERVICE_NAME);
			portProd = serviceProd.getVendorServiceProdImplPort();
			client = org.apache.cxf.frontend.ClientProxy.getClient(portProd);
		}
		// ******************************************************//

		client.getInInterceptors().add(new LoggingInInterceptor());
		client.getOutInterceptors().add(new LoggingOutInterceptor());

		org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();

		Map<String, Object> signatureProps = new HashMap<String, Object>();
		// signatureProps.put(WSHandlerConstants.ACTION,
		// WSHandlerConstants.SIGNATURE);

		signatureProps.put(WSHandlerConstants.ACTION,
				WSHandlerConstants.USERNAME_TOKEN + " "
						+ WSHandlerConstants.TIMESTAMP + " "
						+ WSHandlerConstants.SIGNATURE);
		if (hostlocation.equals("DIT")) {
			signatureProps.put(WSHandlerConstants.USER, p
					.getProperty("dit_user"));
			signatureProps.put(WSHandlerConstants.SIG_PROP_FILE,
					"client_sign.properties");
		} else if (hostlocation.equals("FIT")) {
			signatureProps.put(WSHandlerConstants.USER, p
					.getProperty("fit_user"));
			signatureProps.put(WSHandlerConstants.SIG_PROP_FILE,
					"client_sign_fit.properties");
		} else if (hostlocation.equals("IAT")) {
			signatureProps.put(WSHandlerConstants.USER, p
					.getProperty("iat_user"));
			signatureProps.put(WSHandlerConstants.SIG_PROP_FILE,
					"client_sign_iat.properties");
		} else if (hostlocation.equals("PROD")) {
			signatureProps.put(WSHandlerConstants.USER, p
					.getProperty("prod_user"));
			signatureProps.put(WSHandlerConstants.SIG_PROP_FILE,
					"client_sign_prod.properties");
		}

		signatureProps.put(WSHandlerConstants.PASSWORD_TYPE,
				WSConstants.PW_TEXT);
		signatureProps.put(WSHandlerConstants.PW_CALLBACK_CLASS,
				ClientPasswordCallback.class.getName());
		signatureProps.put(WSHandlerConstants.SIG_KEY_ID, "SKIKeyIdentifier");

		WSS4JOutInterceptor signatureInterceptor = new WSS4JOutInterceptor(
				signatureProps);

		cxfEndpoint.getOutInterceptors().add(signatureInterceptor);
		// cxfEndpoint.getEndpointInfo().setAddress("https://int.adpselect.com:9999");

		TLSClientParameters tlsParams = new TLSClientParameters();

		// REMOVE IN PROD this and the "ditkeystore.jks" to trust invalid cert
		tlsParams.setDisableCNCheck(true);

		KeyStore keyStoreJKS = KeyStore.getInstance("jks");

		// KeyStore keyStorePKCS12 = KeyStore.getInstance("PKCS12");
		String trustpass = "password";
		File truststore = null;
		File truststore2 = null;
		if (hostlocation.equals("DIT")) {
			truststore = new File(p.getProperty("dit_cert_path"));

			truststore2 = new File(p.getProperty("dit_multi_cert_path"));
			keyStoreJKS.load(new FileInputStream(truststore), trustpass
					.toCharArray());

			TrustManagerFactory trustFactory = TrustManagerFactory
					.getInstance(TrustManagerFactory.getDefaultAlgorithm());
			trustFactory.init(keyStoreJKS);

			TrustManager[] tm = trustFactory.getTrustManagers();
			tlsParams.setTrustManagers(tm);

		} else if (hostlocation.equals("FIT")) {
			
			truststore = new File(p.getProperty("fit_cert_path"));

			truststore2 = new File(p.getProperty("fit_multi_cert_path"));
			keyStoreJKS.load(new FileInputStream(truststore), trustpass
					.toCharArray());

			TrustManagerFactory trustFactory = TrustManagerFactory
					.getInstance(TrustManagerFactory.getDefaultAlgorithm());
			trustFactory.init(keyStoreJKS);

			TrustManager[] tm = trustFactory.getTrustManagers();
			tlsParams.setTrustManagers(tm);

		} else if (hostlocation.equals("IAT")) {
			//truststore = new File(p.getProperty("iat_cert_path"));

			truststore2 = new File(p.getProperty("iat_multi_cert_path"));
		} else if (hostlocation.equals("PROD")) {
			truststore = new File(p.getProperty("prod_cert_path"));

			truststore2 = new File(p.getProperty("prod_multi_cert_path"));
		}
		
		keyStoreJKS.load(new FileInputStream(truststore2), trustpass
				.toCharArray());

		KeyManagerFactory keyFactory = KeyManagerFactory
				.getInstance(KeyManagerFactory.getDefaultAlgorithm());
		keyFactory.init(keyStoreJKS, trustpass.toCharArray());

		KeyManager[] km = keyFactory.getKeyManagers();
		tlsParams.setKeyManagers(km);

		FiltersType filter = new FiltersType();
		filter.getInclude().add(".*_EXPORT_.*");
		filter.getInclude().add(".*_EXPORT1024_.*");
		filter.getInclude().add(".*_WITH_DES_.*");
		filter.getInclude().add(".*_WITH_NULL_.*");
		/*
		 * Anu - Following is a production grade cipher suite that needs to be
		 * added. 
		 */
		filter.getInclude().add(".*_WITH_AES_128_.*");
		filter.getInclude().add(".*_WITH_AES_256_.*");

		filter.getExclude().add(".*_DH_anon_.*");

		tlsParams.setCipherSuitesFilter(filter);

		((HTTPConduit) client.getConduit()).setTlsClientParameters(tlsParams);
	}

}
