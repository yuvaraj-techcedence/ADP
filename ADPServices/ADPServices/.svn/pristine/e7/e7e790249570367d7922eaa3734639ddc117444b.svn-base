
package https.sassgateway_adp_com.vendorxml.vendorservice.v1;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.File;
import java.io.FileInputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.security.KeyStore;
import java.util.HashMap;
import java.util.Map;

import javax.xml.namespace.QName;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.TrustManager;
import javax.net.ssl.TrustManagerFactory;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import org.apache.cxf.configuration.jsse.TLSClientParameters;
import org.apache.cxf.configuration.security.FiltersType;
import org.apache.cxf.interceptor.LoggingInInterceptor;
import org.apache.cxf.interceptor.LoggingOutInterceptor;
import org.apache.cxf.transport.http.HTTPConduit;
import org.apache.cxf.ws.security.wss4j.WSS4JOutInterceptor;
import org.apache.ws.security.WSConstants;
import org.apache.ws.security.handler.WSHandlerConstants;

/**
 * This class was generated by Apache CXF 2.2.7
 * Mon May 03 14:56:33 MDT 2010
 * Generated source version: 2.2.7
 * 
 */

public final class VendorService_VendorServiceImplPort_Client {

    private static final QName SERVICE_NAME = new QName("https://sassgateway.adp.com/vendorxml/VendorService/v1", "VendorServiceImplService");

    private VendorService_VendorServiceImplPort_Client() {
    }

    public static void main(String args[]) throws Exception {
      URL wsdlURL = VendorServiceImplService.WSDL_LOCATION;
      if (args.length > 0) { 
          File wsdlFile = new File(args[0]);
          try {
              if (wsdlFile.exists()) {
                  wsdlURL = wsdlFile.toURI().toURL();
              } else {
                  wsdlURL = new URL(args[0]);
              }
          } catch (MalformedURLException e) {
              e.printStackTrace();
          }
      }
    
      VendorServiceImplService ss = new VendorServiceImplService(wsdlURL, SERVICE_NAME);
      VendorService port = ss.getVendorServiceImplPort();  
      
      /*
      {
      System.out.println("Invoking getWork...");
      com.adp.vendorxml.v1.MessageVendorGetWork _getWork_getWorkRequest = null;
      try {
          com.adp.vendorxml.v1.MessageVendorAcknowledgement _getWork__return = port.getWork(_getWork_getWorkRequest);
          System.out.println("getWork.result=" + _getWork__return);

      } catch (GVXException_Exception e) { 
          System.out.println("Expected exception: GVXException has occurred.");
          System.out.println(e.toString());
      }
          }
      {
      System.out.println("Invoking fulfillCriminalHistory...");
      com.adp.vendorxml.v1.MessageVendorFulfillWork _fulfillCriminalHistory_fulfillCriminalHistoryRequest = null;
      try {
          com.adp.vendorxml.v1.MessageVendorAcknowledgement _fulfillCriminalHistory__return = port.fulfillCriminalHistory(_fulfillCriminalHistory_fulfillCriminalHistoryRequest);
          System.out.println("fulfillCriminalHistory.result=" + _fulfillCriminalHistory__return);

      } catch (GVXException_Exception e) { 
          System.out.println("Expected exception: GVXException has occurred.");
          System.out.println(e.toString());
      }
          }*/
      org.apache.cxf.endpoint.Client client = org.apache.cxf.frontend.ClientProxy
	.getClient(port);

client.getInInterceptors().add(new LoggingInInterceptor());
client.getOutInterceptors().add(new LoggingOutInterceptor());

org.apache.cxf.endpoint.Endpoint cxfEndpoint = client.getEndpoint();

Map<String, Object> signatureProps = new HashMap<String, Object>();
//signatureProps.put(WSHandlerConstants.ACTION,
//WSHandlerConstants.SIGNATURE);

signatureProps.put(WSHandlerConstants.ACTION,
	WSHandlerConstants.USERNAME_TOKEN + " "
			+ WSHandlerConstants.TIMESTAMP + " "
			+ WSHandlerConstants.SIGNATURE);
signatureProps.put(WSHandlerConstants.USER, "vendor1@vendorxml");
signatureProps.put(WSHandlerConstants.PASSWORD_TYPE,
	WSConstants.PW_TEXT);
signatureProps.put(WSHandlerConstants.PW_CALLBACK_CLASS,
	ClientPasswordCallback.class.getName());
signatureProps.put(WSHandlerConstants.SIG_KEY_ID, "SKIKeyIdentifier");
signatureProps.put(WSHandlerConstants.SIG_PROP_FILE,
	"client_sign.properties");
WSS4JOutInterceptor signatureInterceptor = new WSS4JOutInterceptor(
	signatureProps);

cxfEndpoint.getOutInterceptors().add(signatureInterceptor);
//cxfEndpoint.getEndpointInfo().setAddress("https://int.adpselect.com:9999");

TLSClientParameters tlsParams = new TLSClientParameters();

//REMOVE IN PROD this and the "ditkeystore.jks" to trust invalid cert
tlsParams.setDisableCNCheck(true);

KeyStore keyStoreJKS = KeyStore.getInstance("jks");

//KeyStore keyStorePKCS12 = KeyStore.getInstance("PKCS12");
String trustpass = "password";

File truststore = new File("../Certs/dit/ditkeystore.jks");
keyStoreJKS.load(new FileInputStream(truststore), trustpass
	.toCharArray());

TrustManagerFactory trustFactory = TrustManagerFactory
	.getInstance(TrustManagerFactory.getDefaultAlgorithm());
trustFactory.init(keyStoreJKS);

TrustManager[] tm = trustFactory.getTrustManagers();
tlsParams.setTrustManagers(tm);

File truststore2 = new File(
	"../Certs/dit/mutualssl/mutualsslkeystore.jks");
keyStoreJKS.load(new FileInputStream(truststore2), trustpass
	.toCharArray());

KeyManagerFactory keyFactory = KeyManagerFactory
	.getInstance(KeyManagerFactory.getDefaultAlgorithm());
keyFactory.init(keyStoreJKS, trustpass.toCharArray());

KeyManager[] km = keyFactory.getKeyManagers();
tlsParams.setKeyManagers(km);

FiltersType filter = new FiltersType();
filter.getInclude().add(".*_EXPORT_.*");
filter.getInclude().add(".*_EXPORT1024_.*");
filter.getInclude().add(".*_WITH_DES_.*");
filter.getInclude().add(".*_WITH_NULL_.*");
filter.getExclude().add(".*_DH_anon_.*");
tlsParams.setCipherSuitesFilter(filter);

((HTTPConduit) client.getConduit()).setTlsClientParameters(tlsParams);
      
      System.out.println("Invoking ping...");
      //com.adp.vendorxml.v1.MessageVendorPing _ping_pingRequest = null;
      
      MessageVendorPing _ping_pingRequest=new MessageVendorPing();
  	_ping_pingRequest.setUserId("GVX509814");
      
      try {
          MessageVendorAcknowledgement _ping__return = port.ping(_ping_pingRequest);
          System.out.println("ping.result=" + _ping__return);

      } catch (GVXException_Exception e) { 
          System.out.println("Expected exception: GVXException has occurred.");
          System.out.println(e.toString());
      }
      

      System.exit(0);
  }
}
